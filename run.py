import asyncio
import logging
import random

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
import os
from datetime import datetime
from aiogram import Bot
from aiogram import types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, FSInputFile
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from docx import Document
from docx.shared import Mm
from docx.shared import Pt

TOKEN = ''
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())



edit_defects = {
    1: {'qst': '–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è'},
    2: {'qst': '–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞'},
    3: {'qst': '–§–æ—Ç–æ'},
    4: {'qst': ' –í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è '},
    5: {'qst': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'},
    6: {'qst': '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ü©Ô∏è'},
}

new_defects = {
    1: {'nd': '–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è'},
    2: {'nd': '–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞'},
    3: {'nd': '–§–æ—Ç–æ'},
    4: {'nd': ' –í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è '},
    5: {'nd': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'},
    6: {'nd': '‚¨á –°–¥–µ–¥—É—é—â–∏–π –¥–µ—Ñ–µ–∫—Ç ‚¨á'},
}

menu = {
    1: {'ans': '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª üìñ'},
    2: {'ans': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª üìù'},
    3: {'ans': '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç üÜï'}
}

privet = ['–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫',
          '–ë—É–¥—å –∫–∞–∫ –¥–æ–º–∞ –ø—É—Ç–Ω–∏–∫',
          'Welcome',
          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',
          '–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å',
          'Hello',
          '–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏ –≤–∞—Å –≤ —É–ª–∏—á–Ω—ã—Ö –≥–æ–Ω–∫–∞—Ö',
          '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º',
          '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
          '–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å',
          '–ú—ã –≤–∞—Å –∂–¥–∞–ª–∏',
          '–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏',
          '–ê —è –≤—Å—ë –¥—É–º–∞–ª, –∫–æ–≥–¥–∞ –∂–µ –≤—ã –ø–æ—è–≤–∏—Ç–µ—Å—å',
          '–ù–∞—à–∞ —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –≤–∞—à–µ–≥–æ –≤–∏–∑–∏—Ç–∞ –Ω–µ –∑–Ω–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü!']

stickers = ['CAACAgIAAxkBAAENr9tnnh01FnARp-4cYGG5RYdDVHYM4AACOAsAAk7kmUsysUfS2U-M0DYE',
           'CAACAgIAAxkBAAENwMBnqPQ5Io12GgsOx6SqIRDntKXhtgAC7goAAp2hYUuW93rCAubsUDYE',
           'CAACAgIAAxkBAAENvGpnpkIuQLOdaHk3JDotVtzmtMyXIgACsw4AAln8mUtNMf9WVqKCDjYE',
           'CAACAgIAAxkBAAENu59npeAfjF3pzKmPTgdY1RXBEhrgKAAC-woAAm80oUssauxdTRu1eDYE',
           'CAACAgIAAxkBAAENwMZnqPRdDo7mjRWCYXA9tzcIKrscAQACKwwAAiIwWEvIROJY0qdhFDYE',
           'CAACAgIAAxkBAAENwMhnqPRxIn9sDyKHfTJ5TOCgzUDi1gACUg0AAoOa6EttjhqMTmtfqzYE',
           'CAACAgIAAxkBAAENwMlnqPRxLA9epPMyFRTcizo0kSidtgACLA0AArs76EuqM6J0TSMuQTYE',
           'CAACAgIAAxkBAAENwMxnqPST74bmP7dStj_ZOcxA0uQ4cwACJg4AAvW6EEiEWDQIzqqeEzYE',
           'CAACAgIAAxkBAAENwM5nqPScHWdLjHY7WlVC0-S3kf9w2gACIgoAAu8zAAFIBThdk4Ga-zg2BA',
           'CAACAgIAAxkBAAENwNBnqPSp0k5Ow2_NrPqEGJmgVAMfUwACTA8AArE_mUtMSxoS68HKSjYE'
]

current_date = datetime.now()
name_document = f'/data/dasha.docx'
doc = Document('/data/dasha.docx')
table = doc.tables[0]
number_defect = 1
number_row = number_defect + 1
msg_id = int
edit_msg_id = int
msg_save_photo_id = int
msg_next_id = int

location = ''
description_of_defect = ''
photo = ''
probable_cause_of_occurrence = ''
recommendations = ''



class Status(StatesGroup):
    location = State()
    description_of_defect = State()
    photo = State()
    probable_cause_of_occurrence = State()
    recommendations = State()

# inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
async def status_kb_inline() -> InlineKeyboardMarkup:
    if number_defect == len(table.rows)-2:
        key_name = new_defects
        key = 'nd'
    else:
        key_name = edit_defects
        key = 'qst'
    builder = InlineKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    for key_id, key_data in key_name.items():
        builder.row(InlineKeyboardButton(text=key_data.get(f'{key}'), callback_data=f'{key}_{key_id}'))
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return builder.adjust(1).as_markup()

inlkbt_edit_defect = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç', callback_data='edit_defect')]])

inlkbt_save_photo = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=f'–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='save_photo')]])

inlkbt_next_defect = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text=f'‚¨á –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚¨á', callback_data='nd_6')]])

# Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
async def status_kb_reply() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    for menu_id, menu_data in menu.items():
        builder.add(KeyboardButton(text=menu_data.get('ans')))
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return builder.adjust(2).as_markup(input_field_placeholder=f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}')


# –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def edit_kb():
    if number_defect == len(table.rows)-2:
        key_col = new_defects
        key = 'nd'
    else:
        key = 'qst'
        key_col = edit_defects
    qst_1 = len(table.rows[number_row].cells[1].text)
    qst_2 = len(table.rows[number_row].cells[2].text)
    qst_3 = len(table.rows[number_row].cells[3].text)
    qst_4 = len(table.rows[number_row].cells[4].text)
    qst_5 = len(table.rows[number_row].cells[5].text)
    if qst_1 > 0:
        key_col[1][f'{key}'] = '–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è ‚úÖ'
    else:
        key_col[1][f'{key}'] = '–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è'

    if qst_2 > 0:
        key_col[2][f'{key}'] = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞ ‚úÖ'
    else:
        key_col[2][f'{key}'] = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞'

    if qst_3 > 0:
        key_col[3][f'{key}'] = '–§–æ—Ç–æ ‚úÖ'
    else:
        key_col[3][f'{key}'] = '–§–æ—Ç–æ'

    if qst_4 > 0:
        key_col[4][f'{key}'] = '–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è ‚úÖ'
    else:
        key_col[4][f'{key}'] = '–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è'

    if qst_5 > 0:
        key_col[5][f'{key}'] = '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚úÖ'
    else:
        key_col[5][f'{key}'] = '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'

# –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–µ—Ñ–µ–∫—Ç–∞
async def edit_text():
    global location, description_of_defect, photo, probable_cause_of_occurrence, recommendations
    qst_1 = len(table.rows[number_row].cells[1].text)
    qst_2 = len(table.rows[number_row].cells[2].text)
    qst_3 = len(table.rows[number_row].cells[3].text)
    qst_4 = len(table.rows[number_row].cells[4].text)
    qst_5 = len(table.rows[number_row].cells[5].text)
    if qst_1 > 0:
        location = '‚úÖ'
    else:
        location = '‚ùå'
    if qst_2 > 0:
        description_of_defect = '‚úÖ'
    else:
        description_of_defect = '‚ùå'
    if qst_3 > 0:
        photo = '‚úÖ'
    else:
        photo = '‚ùå'
    if qst_4 > 0:
        probable_cause_of_occurrence = '‚úÖ'
    else:
        probable_cause_of_occurrence = '‚ùå'
    if qst_5 > 0:
        recommendations = '‚úÖ'
    else:
        recommendations = '‚ùå'

# –í—ã–Ω–∏–º–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
async def update_number_defect(find_defect):
    global number_defect
    length = len(find_defect)
    i = 0
    while i < length:
        s_int = ''
        while i < length and '0' <= find_defect[i] <= '9':
            s_int += find_defect[i]
            i += 1
        i += 1
        if s_int != '':
            number_defect = int(s_int)





# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start (massage: types.Message):
    rand_sticker = random.choice(stickers)
    await massage.answer_sticker(sticker=rand_sticker, reply_markup=await status_kb_reply())
    # await massage.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞,\n–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–µ–∫—Ç–Ω—É—é –≤–µ–¥–æ–º–æ—Å—Ç—å.', reply_markup=await status_kb_reply(number_defect-1))
    await edit_kb()
    table.rows[number_row].cells[0].text = str(number_defect)
    rand_priv = random.choice(privet)
    await massage.answer(rand_priv)
    msg = await massage.answer(f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}', reply_markup=await status_kb_inline())
    global msg_id
    msg_id = msg.message_id

# –°–ª–µ–¥—É—é—â–∏–π –¥–µ—Ñ–µ–∫—Ç
@dp.callback_query(lambda callback: callback.data=='nd_6' or callback.data=='qst_6')
async def next_defect (callback: types.CallbackQuery):
    global number_defect, number_row
    await update_number_defect(callback.message.text)
    await edit_text()
    await callback.message.edit_text(f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}'
                                     f'\n–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è: {location}'
                                     f'\n–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞: {description_of_defect}'
                                     f'\n–§–æ—Ç–æ: {photo}'
                                     f'\n–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {probable_cause_of_occurrence}'
                                     f'\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}',
                                     reply_markup=inlkbt_edit_defect)
    new_row = table.add_row().cells
    number_defect = len(table.rows)-2
    number_row = number_defect + 1
    table.rows[number_row].cells[0].text = str(number_defect)
    await edit_kb()
    await callback.message.answer('________________________________', reply_markup=await status_kb_reply())
    msg_next = await callback.message.answer(f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}', reply_markup=await status_kb_inline(), cache_time=2)
    global msg_next_id
    msg_next_id = msg_next.message_id

# —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
@dp.callback_query(F.data == 'edit_defect')
async def edit_defect(callback: types.CallbackQuery, bot: Bot):
    global msg_id, edit_msg_id, number_defect, number_row
    await bot.delete_message(
        chat_id=callback.message.chat.id,
        message_id=msg_next_id)
    await edit_text()
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=msg_id,
        text=f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}'
        f'\n–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è: {location}'
        f'\n–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞: {description_of_defect}'
        f'\n–§–æ—Ç–æ: {photo}'
        f'\n–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è: {probable_cause_of_occurrence}'
        f'\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations}',
        reply_markup=inlkbt_edit_defect)
    await update_number_defect(callback.message.text)
    number_row = number_defect + 1
    await edit_kb()
    await callback.message.edit_text(text='~–î–µ—Ñ–µ–∫—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω~', parse_mode='MarkdownV2', reply_markup=None)
    await callback.message.answer('________________________________', reply_markup=await status_kb_reply())
    msg = await callback.message.answer(text=f'–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –¥–µ—Ñ–µ–∫—Ç {number_defect}', reply_markup=await status_kb_inline())
    msg_id = msg.message_id

# –ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
@dp.callback_query(lambda callback: callback.data=='nd_1' or callback.data=='qst_1')
async def col_1(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Status.location)
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è')
    await callback.message.edit_text(text='–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è:', reply_markup=None)
@dp.message(Status.location)
async def end_1(message: Message, state: FSMContext):
    await state.update_data(location=message.text)
    data = await state.get_data()
    table.rows[number_row].cells[1].text = data["location"]
    await edit_kb()
    if number_defect != len(table.rows)-2:
        msg = await message.answer(text=f'–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –¥–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}',reply_markup=await status_kb_inline())
    else:
        msg = await message.answer(text=f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}',reply_markup=await status_kb_inline())
    global msg_id
    msg_id = msg.message_id
    await state.clear()

# –û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞
@dp.callback_query(lambda callback: callback.data=='nd_2' or callback.data=='qst_2')
async def col_2(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Status.description_of_defect)
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞')
    await callback.message.edit_text(text='–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ñ–µ–∫—Ç–∞:', reply_markup=None)
@dp.message(Status.description_of_defect)
async def end_2(message: Message, state: FSMContext):
    await state.update_data(description_of_defect=message.text)
    data = await state.get_data()
    table.rows[number_row].cells[2].text = data["description_of_defect"]
    await edit_kb()
    if number_defect != len(table.rows) - 2:
        msg = await message.answer(text=f'–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –¥–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}',
                                   reply_markup=await status_kb_inline())
    else:
        msg = await message.answer(text=f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}', reply_markup=await status_kb_inline())
    global msg_id
    msg_id = msg.message_id
    await state.clear()

# –§–æ—Ç–æ –¥–µ—Ñ–µ–∫—Ç–∞
@dp.callback_query(lambda callback: callback.data=='nd_3' or callback.data=='qst_3' or callback.data== 'save_photo')
async def col_3(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    if callback.data=='nd_3' or callback.data=='qst_3':
        await state.set_state(Status.photo)
        await callback.answer('–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ', cache_time=2)
        msg_save_photo = await callback.message.edit_text(text='–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:',
                                                          reply_markup=inlkbt_save_photo)
        global msg_save_photo_id
        msg_save_photo_id = msg_save_photo.message_id
    elif callback.data== 'save_photo':
        await edit_kb()
        if number_defect != len(table.rows) - 2:
            msg = await callback.message.answer(text=f'–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –¥–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}',
                                       reply_markup=await status_kb_inline())
        else:
            msg = await callback.message.answer(text=f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}', reply_markup=await status_kb_inline())
        global msg_id
        msg_id = msg.message_id
        await bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=msg_save_photo_id)
        await state.clear()

    @dp.message(Status.photo)
    async def end_3(message: Message, state: FSMContext):
        await state.update_data(photo=message.photo[-1])
        data = await state.get_data()
        unique_id = data['photo'].file_unique_id
        save_path = f'/data/{unique_id}.jpg'
        await message.bot.download(file=data['photo'], destination=save_path)
        cell = table.rows[number_row].cells[3]
        paragraph = cell.paragraphs[0]
        run = paragraph.add_run()
        run.add_picture(save_path, width=Mm(84))
        run = paragraph.add_run(f'\n–§–æ—Ç–æ {unique_id}.jpg')
        run.font.size = Pt(6)
        os.remove(save_path)

# –í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è
@dp.callback_query(lambda callback: callback.data=='nd_4' or callback.data=='qst_4')
async def col_4(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Status.probable_cause_of_occurrence)
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è')
    await callback.message.edit_text(text='–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è:', reply_markup=None)
@dp.message(Status.probable_cause_of_occurrence)
async def end_4(message: Message, state: FSMContext):
    await state.update_data(probable_cause_of_occurrence=message.text)
    data = await state.get_data()
    table.rows[number_row].cells[4].text = data["probable_cause_of_occurrence"]
    await edit_kb()
    if number_defect != len(table.rows) - 2:
        msg = await message.answer(text=f'–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –¥–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}',
                                   reply_markup=await status_kb_inline())
    else:
        msg = await message.answer(text=f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}', reply_markup=await status_kb_inline())
    global msg_id
    msg_id = msg.message_id
    await state.clear()

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
@dp.callback_query(lambda callback: callback.data=='nd_5' or callback.data=='qst_5')
async def col_5(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(Status.recommendations)
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')
    await callback.message.edit_text(text='–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:', reply_markup=None)
@dp.message(Status.recommendations)
async def end_5(message: Message, state: FSMContext):
    await state.update_data(recommendations=message.text)
    data = await state.get_data()
    table.rows[number_row].cells[5].text = data["recommendations"]
    await edit_kb()
    if number_defect != len(table.rows) - 2:
        msg = await message.answer(text=f'–í—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ –¥–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}',
                                   reply_markup=await status_kb_inline())
    else:
        msg = await message.answer(text=f'–î–µ—Ñ–µ–∫—Ç ‚Ññ{number_defect}', reply_markup=await status_kb_inline())
    global msg_id
    msg_id = msg.message_id
    await state.clear()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
@dp.message(F.text == '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª üìù')
async def save_file (message: Message):
    doc.save(name_document)
    await message.answer('–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω')

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
@dp.message(F.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª üìñ')
async def download_file (message: types.Message):
    document =  FSInputFile(name_document)
    await message.answer_document (document=document, caption='–¢—ã –º–æ–ª–æ–¥—á–∏–Ω–∞ üí™')
    os.remove(name_document)

# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
@dp.message(F.text == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç üÜï')
async def new_file (message: Message):
    await message.answer('–ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω')
    os.system('python3 run.py')











async def main():

    await dp.start_polling(bot)



if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:

        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
